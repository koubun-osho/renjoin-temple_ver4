/**
 * 蓮城院公式サイト - ダイナミックコンポーネント
 *
 * パフォーマンス最適化のためのコード分割とダイナミックインポート
 * Core Web Vitals向上のため、重要でないコンポーネントを遅延読み込み
 *
 * @created 2025-09-18
 * @version 1.0.0 Performance Optimization版
 * @task P4-04 - パフォーマンス最適化
 */

'use client'

import dynamic from 'next/dynamic'
import { ComponentType, Suspense } from 'react'

// ========================
// ローディングコンポーネント
// ========================

/**
 * 汎用ローディングスケルトン
 */
const LoadingSkeleton = ({ height = "200px", className = "" }: { height?: string; className?: string }) => (
  <div className={`animate-pulse bg-gray-200 rounded-lg ${className}`} style={{ height }}>
    <div className="flex items-center justify-center h-full">
      <div className="w-8 h-8 border-4 border-amber-200 border-t-amber-600 rounded-full animate-spin"></div>
    </div>
  </div>
)

/**
 * セクション用ローディング
 */
const SectionLoadingSkeleton = () => (
  <div className="py-12 sm:py-16 lg:py-24">
    <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div className="animate-pulse">
        {/* タイトル */}
        <div className="text-center mb-8 sm:mb-12">
          <div className="h-8 bg-gray-200 rounded w-48 mx-auto mb-4"></div>
          <div className="h-1 bg-gray-200 rounded w-24 mx-auto mb-6"></div>
          <div className="h-4 bg-gray-200 rounded w-96 mx-auto"></div>
        </div>

        {/* コンテンツグリッド */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {[...Array(3)].map((_, index) => (
            <div key={index} className="bg-gray-200 rounded-lg h-64"></div>
          ))}
        </div>
      </div>
    </div>
  </div>
)

/**
 * カード用ローディング
 */
const CardLoadingSkeleton = () => (
  <div className="bg-white rounded-lg shadow-md p-6 animate-pulse">
    <div className="h-4 bg-gray-200 rounded w-3/4 mb-2"></div>
    <div className="h-4 bg-gray-200 rounded w-1/2 mb-4"></div>
    <div className="space-y-2">
      <div className="h-3 bg-gray-200 rounded"></div>
      <div className="h-3 bg-gray-200 rounded w-5/6"></div>
    </div>
  </div>
)

// ========================
// ダイナミックインポート設定
// ========================

/**
 * GoogleAnalyticsコンポーネント（非クリティカル）
 */
export const DynamicGoogleAnalytics = dynamic(
  () => import('../common/GoogleAnalytics'),
  {
    ssr: false, // クライアントサイドのみ
    loading: () => null // 分析タグなのでローディングUI不要
  }
)

/**
 * CookieConsentコンポーネント（非クリティカル）
 */
export const DynamicCookieConsent = dynamic(
  () => import('../common/CookieConsent'),
  {
    ssr: false, // クライアントサイドのみ
    loading: () => (
      <div className="fixed bottom-4 right-4 w-80 bg-white rounded-lg shadow-lg p-4 animate-pulse">
        <div className="h-4 bg-gray-200 rounded w-full mb-2"></div>
        <div className="h-4 bg-gray-200 rounded w-3/4"></div>
      </div>
    )
  }
)

/**
 * ブログ分析コンポーネント（非クリティカル）
 */
export const DynamicBlogAnalytics = dynamic(
  () => import('../blog/BlogAnalytics'),
  {
    ssr: false, // 分析用なのでクライアントサイドのみ
    loading: () => null
  }
)

/**
 * AboutSectionコンポーネント（ファーストビューではない）
 */
export const DynamicAboutSection = dynamic(
  () => import('../sections/AboutSection').then(mod => ({ default: mod.AboutSection })),
  {
    loading: () => <SectionLoadingSkeleton />,
    ssr: true // SEO重要なのでSSR有効
  }
)

/**
 * AccessSectionコンポーネント（ファーストビューではない）
 */
export const DynamicAccessSection = dynamic(
  () => import('../sections/AccessSection').then(mod => ({ default: mod.AccessSection })),
  {
    loading: () => <SectionLoadingSkeleton />,
    ssr: true // SEO重要なのでSSR有効
  }
)

/**
 * CardGridコンポーネント（初期表示に含まれない場合）
 */
export const DynamicCardGrid = dynamic(
  () => import('../ui/Card').then(mod => ({ default: mod.CardGrid })),
  {
    loading: () => (
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {[...Array(3)].map((_, index) => (
          <CardLoadingSkeleton key={index} />
        ))}
      </div>
    ),
    ssr: true
  }
)

// ========================
// 条件付きダイナミックローダー
// ========================

/**
 * OptimizedImageコンポーネント
 */
export const DynamicOptimizedImage = dynamic(
  () => import('../ui/OptimizedImage'),
  {
    loading: () => <div className="w-full h-full bg-gray-200 animate-pulse rounded-lg"></div>,
    ssr: true
  }
)

// ========================
// HOC（Higher Order Component）
// ========================

/**
 * コンポーネントをSuspenseでラップするHOC
 */
export function withSuspense<P extends object>(
  Component: ComponentType<P>,
  fallback?: React.ReactNode
) {
  const WrappedComponent = (props: P) => (
    <Suspense fallback={fallback || <LoadingSkeleton />}>
      <Component {...props} />
    </Suspense>
  )

  WrappedComponent.displayName = `withSuspense(${Component.displayName || Component.name})`
  return WrappedComponent
}

/**
 * 可視性ベースの遅延ロード
 */
export function withIntersectionObserver<P extends object>(
  Component: ComponentType<P>,
  options: IntersectionObserverInit = {}
) {
  const LazyComponent = dynamic(
    () => Promise.resolve({ default: Component }),
    {
      loading: () => <LoadingSkeleton />,
      ssr: false
    }
  )

  const WrappedComponent = (props: P) => {
    return <LazyComponent {...props} />
  }

  WrappedComponent.displayName = `withIntersectionObserver(${Component.displayName || Component.name})`
  return WrappedComponent
}

// ========================
// プリロード関数
// ========================

/**
 * 重要なコンポーネントをプリロード
 */
export const preloadCriticalComponents = () => {
  // ユーザーの操作が予想される重要なコンポーネントをプリロード
  if (typeof window !== 'undefined') {
    // ページ遷移時によく使われるコンポーネント
    import('../ui/Card')
    import('../sections/AboutSection')
    import('../sections/AccessSection')
  }
}

/**
 * ルートベースのプリロード
 */
export const preloadByRoute = (route: string) => {
  if (typeof window === 'undefined') return

  switch (route) {
    case '/':
      // トップページで使用されるコンポーネント
      import('../sections/AboutSection')
      import('../sections/AccessSection')
      break
    case '/blog':
      // ブログページで使用されるコンポーネント
      import('../blog/BlogAnalytics')
      break
    case '/news':
      // お知らせページで使用されるコンポーネント
      import('../ui/Card')
      break
    default:
      break
  }
}

// ========================
// パフォーマンス測定
// ========================

/**
 * コンポーネントロード時間を測定
 */
export const measureComponentLoadTime = (componentName: string) => {
  if (typeof window === 'undefined' || !window.performance) return

  const startTime = performance.now()

  return {
    end: () => {
      const endTime = performance.now()
      const loadTime = endTime - startTime

      // Google Analytics等に送信
      if (window.gtag) {
        window.gtag('event', 'component_load_time', {
          component_name: componentName,
          load_time: Math.round(loadTime),
          event_category: 'Performance'
        })
      }

      console.log(`Component ${componentName} loaded in ${loadTime.toFixed(2)}ms`)
      return loadTime
    }
  }
}

export default {
  DynamicGoogleAnalytics,
  DynamicCookieConsent,
  DynamicBlogAnalytics,
  DynamicAboutSection,
  DynamicAccessSection,
  DynamicCardGrid,
  DynamicOptimizedImage,
  withSuspense,
  withIntersectionObserver,
  preloadCriticalComponents,
  preloadByRoute,
  measureComponentLoadTime
}